{
  "exclude": [
    "(^yarn.lock$)",
    "(LICENSE)"
  ],
  "linters": {
    "filename": {
      "type": "filename"
    },
    "json": {
      "type": "json",
      "exclude": [
        "(\\.vscode/.*)"
      ],
      "include": [
        "(^\\.arcconfig$)",
        "(^\\.arclint$)",
        "(\\.json$)"
      ]
    },
    "merge-conflict": {
      "type": "merge-conflict"
    },
    "nolint": {
      "type": "nolint"
    },
    "spelling": {
      "type": "spelling",
      "exclude": [
        "(.*\\.crt)",
        "(.*\\.key)"
      ]
    },
    "text": {
      "type": "text",
      "text.max-line-length": 120,
      "exclude": [
        "(\\.arclint$)",
        "(^linters/*)",
        "(\\.js?$)",
        "(\\.css$)",
        "(\\.toml$)",
        "(.*\\.md)",
        "(.*\\.svg)",
        "(^external/.*)"
      ]
    },
    "eslint": {
      "type": "eslint",
      "bin": "./node_modules/.bin/eslint",
      "eslint.config": "./.eslintrc.json",
      "eslint.env": "browser",
      "include": [
        "(.*\\.(tsx)$)",
        "(.*\\.(ts)$)",
        "(.*\\.(js)$)"
      ]
    },
    "license": {
      "type": "script-and-regex",
      "script-and-regex.script": "./tools/licenses/checker.py -a -f",
      "script-and-regex.regex": "/^(?P<file>[^\n]+)(?P<error>:)((?P<line>\\d),(?P<char>\\d)\n<<<<<\n(?P<original>.*)=====\n(?P<replacement>.*)>>>>>\n)$/s",
      "exclude": [
        "(__phutil_library_init__.\\php$)",
        "(__phutil_library_map__.\\php$)"
      ]
    } 
  }
}
